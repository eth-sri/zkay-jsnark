/*******************************************************************************
 * Gadget to derive EC public key from secret key, based on jsnark's ECDH gadget
 * Author: Nick Baumann
 *******************************************************************************/
package zkay;

import circuit.structure.ConstantWire;
import circuit.structure.Wire;

import java.math.BigInteger;

/**
 * Pk derivation part of jsnark's ECDHKeyExchangeGadget
 */

public class ZkayEcPkDerivationGadget extends ZkayEcGadget {

    // The Affine point representation is used as it saves one gate per bit
    private final AffinePoint basePoint; // The Base point both parties agree to

    private final Wire[] secretBits; // the bits of the secret generated by this party
    // (follows little-endian order)

    // gadget output
    private Wire outputPublicValue; // the x-coordinate of the key exchange
    // material to be sent to the other party
    // outputPublicValue = ((this party's
    // secret)*Base).x

    public ZkayEcPkDerivationGadget(Wire secretKey, boolean validateSecret, String... desc) {
        super(desc);
        this.secretBits = secretKey.getBitWires(SECRET_BITWIDTH).asArray();
        this.basePoint = new AffinePoint(generator.createConstantWire(4)); // Hardcode base point
        if (validateSecret) {
            checkSecretBits(generator, secretBits);
        }
        computeYCoordinates(); // For efficiency reasons, we rely on affine
        // coordinates
        buildCircuit();
    }

    protected void buildCircuit() {
        AffinePoint[] baseTable = preprocess(basePoint);
        outputPublicValue = mul(basePoint, secretBits, baseTable).x;
    }

    private void computeYCoordinates() {
        BigInteger x = ((ConstantWire) basePoint.x).getConstant();
        basePoint.y = generator.createConstantWire(computeYCoordinate(x));
    }

    @Override
    public Wire[] getOutputWires() {
        return new Wire[] { outputPublicValue };
    }
}
